<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="description" content="Minimal 3D Rotating Torus Test">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3D Torus - Minimal Test</title>

  <!-- Three.js from CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

  <style>
    /* Reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    html, body {
      width: 100%;
      height: 100%;
      background: #fff;
      font-family: sans-serif;
      overflow: hidden; /* no horizontal scroll */
    }

    /* Full-window hero container */
    .hero {
      position: relative;
      width: 100%;
      height: 100vh;   /* fill full viewport height */
      background: #000; /* fallback color if webgl fails */
      overflow: hidden;
    }
    /* The 3D canvas */
    #three-canvas {
      position: absolute;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
      display: block;
      z-index: -1;
    }
    /* Info overlay to confirm sizes, etc. */
    .info {
      position: absolute;
      top: 1rem;
      left: 1rem;
      color: #fff;
      font-size: 1rem;
      z-index: 1;
    }
  </style>
</head>
<body>
  <section class="hero">
    <div class="info" id="info">No logs yet</div>
    <canvas id="three-canvas"></canvas>
  </section>

  <script>
  document.addEventListener("DOMContentLoaded", () => {
    const hero = document.querySelector(".hero");
    const infoDiv = document.getElementById("info");
    if (!hero) {
      console.error("Hero container not found!");
      return;
    }

    // Log hero container size
    console.log("Hero container size:", hero.clientWidth, hero.clientHeight);
    infoDiv.textContent = `Hero size: ${hero.clientWidth} x ${hero.clientHeight}`;

    // 1) Create renderer
    const canvas = document.getElementById("three-canvas");
    if (!canvas) {
      console.error("Canvas not found!");
      return;
    }
    const renderer = new THREE.WebGLRenderer({
      canvas,
      antialias: true
    });
    // Black background
    renderer.setClearColor(0x000000, 1);

    // Set size to hero's dimension
    renderer.setSize(hero.clientWidth, hero.clientHeight);
    renderer.setPixelRatio(window.devicePixelRatio);

    // 2) Scene & Camera
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      50,
      hero.clientWidth / hero.clientHeight,
      0.1,
      1000
    );
    camera.position.z = 6;

    // 3) Torus geometry, obviously 3D
    const geometry = new THREE.TorusGeometry(2, 0.5, 16, 100);
    // bright pink so it stands out
    const material = new THREE.MeshBasicMaterial({ color: 0xff00cc });
    const torus = new THREE.Mesh(geometry, material);
    scene.add(torus);

    // 4) Animate
    function animate() {
      requestAnimationFrame(animate);
      // rotate the torus
      torus.rotation.x += 0.01;
      torus.rotation.y += 0.01;
      renderer.render(scene, camera);
    }
    animate();

    // 5) On resize, adapt to new container
    window.addEventListener("resize", () => {
      console.log("Resizing hero to:", hero.clientWidth, hero.clientHeight);
      infoDiv.textContent = `Hero size: ${hero.clientWidth} x ${hero.clientHeight}`;

      renderer.setSize(hero.clientWidth, hero.clientHeight);
      camera.aspect = hero.clientWidth / hero.clientHeight;
      camera.updateProjectionMatrix();
    });
  });
  </script>
</body>
</html>
