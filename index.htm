<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="description" content="Furiosa – Three.js ES Modules Fixes">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FURIOSA – ES Module Fix</title>
  <style>
    /* Minimal reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    html, body {
      width: 100%;
      height: 100%;
      background: #000; /* fallback black background */
      overflow: hidden;
      font-family: sans-serif;
    }

    /* A full-screen container for the 3D scene */
    #hero {
      position: relative;
      width: 100%;
      height: 100%;
      background: #000;
    }
    /* An overlay for debug or instructions */
    #info {
      position: absolute;
      top: 1rem;
      left: 1rem;
      color: #fff;
      z-index: 10;
      font-size: 1rem;
    }
    /* Canvas that displays the Three.js scene */
    canvas {
      position: absolute;
      top: 0; 
      left: 0;
      display: block;
      width: 100%;
      height: 100%;
      z-index: -1; /* behind the text overlay */
    }
  </style>
</head>
<body>
  <div id="hero">
    <div id="info">Furiosa Three.js – ES Module Demo</div>
    <canvas id="three-canvas"></canvas>
  </div>

  <!-- Use ES Modules from a matching version (0.128) of Three + OrbitControls -->
  <script type="module">
    import * as THREE from "https://cdn.jsdelivr.net/npm/three@0.128/build/three.module.js";
    import { OrbitControls } from "https://cdn.jsdelivr.net/npm/three@0.128/examples/jsm/controls/OrbitControls.js";

    // Wait for DOM (not strictly necessary in "type=module", but safe)
    document.addEventListener("DOMContentLoaded", () => {
      const hero = document.getElementById("hero");
      const canvas = document.getElementById("three-canvas");
      const info = document.getElementById("info");

      // Log container size
      console.log("Hero size:", hero.clientWidth, hero.clientHeight);
      info.textContent += ` | Size: ${hero.clientWidth} x ${hero.clientHeight}`;

      // 1) Create WebGLRenderer
      const renderer = new THREE.WebGLRenderer({
        canvas: canvas,
        antialias: true
      });
      renderer.setClearColor(0x000000, 1); // black background
      renderer.setSize(hero.clientWidth, hero.clientHeight);
      renderer.setPixelRatio(window.devicePixelRatio);

      // 2) Scene & Camera
      const scene = new THREE.Scene();
      // A perspective camera that fits the container
      const camera = new THREE.PerspectiveCamera(
        50,
        hero.clientWidth / hero.clientHeight,
        0.1,
        1000
      );
      camera.position.set(0, 0, 30);

      // 3) OrbitControls
      const controls = new OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.dampingFactor = 0.05;
      controls.enablePan = false; // optional
      controls.update();

      // 4) Add geometry (a big pink torus)
      const geometry = new THREE.TorusGeometry(10, 3, 16, 60);
      // BasicMaterial so we don't rely on lighting
      const material = new THREE.MeshBasicMaterial({ color: 0xff00ff });
      const torus = new THREE.Mesh(geometry, material);
      scene.add(torus);

      // Animate
      function animate() {
        requestAnimationFrame(animate);

        // Slight rotation
        torus.rotation.x += 0.002;
        torus.rotation.y += 0.003;

        controls.update();
        renderer.render(scene, camera);
      }
      animate();

      // On resize
      window.addEventListener("resize", () => {
        console.log("Resizing hero container...");
        const w = hero.clientWidth, h = hero.clientHeight;
        console.log("New size:", w, h);
        info.textContent = `Furiosa Three.js – ES Module Demo | Size: ${w} x ${h}`;

        renderer.setSize(w, h);
        camera.aspect = w / h;
        camera.updateProjectionMatrix();
      });
    });
  </script>
</body>
</html>
