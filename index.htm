<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="description" content="Three.js + OrbitControls ES Modules Test">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Three.js ES Module OrbitControls</title>
  <style>
    /* Minimal reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    html, body {
      width: 100%;
      height: 100%;
      background: #000; /* fallback black background */
      overflow: hidden;
      font-family: sans-serif;
    }

    /* Container for the scene */
    #hero {
      width: 100%;
      height: 100%;
      position: relative;
      background: #000;
    }
    #info {
      position: absolute;
      top: 1rem;
      left: 1rem;
      color: #fff;
      z-index: 10;
      font-size: 1rem;
    }
    canvas {
      position: absolute;
      display: block;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
      z-index: -1; /* behind the info text */
    }
  </style>
</head>
<body>

<div id="hero">
  <div id="info">Three.js + OrbitControls (ES Module)</div>
  <canvas id="three-canvas"></canvas>
</div>

<!-- ES Module approach -->
<script type="module">
/* 
   1) Import Three.js 
   2) Import OrbitControls from /jsm/controls/ 
   both must match the same version (here 0.128).
*/
import * as THREE from "https://cdn.jsdelivr.net/npm/three@0.128/build/three.module.js";
import { OrbitControls } from "https://cdn.jsdelivr.net/npm/three@0.128/examples/jsm/controls/OrbitControls.js";

// Wait for DOM
document.addEventListener("DOMContentLoaded", () => {
  const hero = document.getElementById("hero");
  const infoDiv = document.getElementById("info");
  if (!hero) {
    console.error("No #hero container found!");
    return;
  }

  // 1) Create renderer
  const canvas = document.getElementById("three-canvas");
  const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
  // black background
  renderer.setClearColor(0x000000, 1);

  const width = hero.clientWidth;
  const height = hero.clientHeight;
  console.log("Hero container size:", width, height);
  infoDiv.textContent += ` | Size: ${width} x ${height}`;

  renderer.setSize(width, height);
  renderer.setPixelRatio(window.devicePixelRatio);

  // 2) Scene & Camera
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 1000);
  camera.position.set(0, 0, 25);

  // 3) OrbitControls
  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;   // smooth movement
  controls.dampingFactor = 0.05;
  controls.enablePan = false;      // optional

  // 4) A bright pink torus
  const geometry = new THREE.TorusGeometry(10, 3, 16, 60);
  const material = new THREE.MeshBasicMaterial({ color: 0xff00ff });
  const torus = new THREE.Mesh(geometry, material);
  scene.add(torus);

  // Animate
  function animate() {
    requestAnimationFrame(animate);
    // Rotate slightly
    torus.rotation.x += 0.001;
    torus.rotation.y += 0.002;
    // Update controls
    controls.update();
    renderer.render(scene, camera);
  }
  animate();

  // On resize
  window.addEventListener("resize", () => {
    const newW = hero.clientWidth;
    const newH = hero.clientHeight;
    console.log("Resizing to:", newW, newH);
    infoDiv.textContent = `Three.js + OrbitControls (ES Module) | Size: ${newW} x ${newH}`;
    
    renderer.setSize(newW, newH);
    camera.aspect = newW / newH;
    camera.updateProjectionMatrix();
  });
});
</script>
</body>
</html>
