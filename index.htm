<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="description" content="Three.js Torus + OrbitControls test" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Three.js Torus Orbit Test</title>

  <!-- Three.js from CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <!-- OrbitControls (matching your Three.js version) -->
  <script src="https://cdn.jsdelivr.net/npm/three@0.128/examples/jsm/controls/OrbitControls.js"></script>

  <style>
    /* Reset & Base */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    html, body {
      width: 100%;
      height: 100%;
      background: #000; /* fallback black if nothing renders */
      font-family: sans-serif;
      overflow: hidden; /* no horizontal scroll */
    }

    /* Full-screen hero container */
    #hero {
      position: relative;
      width: 100%;
      height: 100%;
      background: #000; /* fallback */
      overflow: hidden;
    }
    #info {
      position: absolute;
      top: 1rem; left: 1rem;
      color: #fff;
      z-index: 10;
    }
    canvas {
      position: absolute;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
      display: block;
      z-index: -1;
    }
  </style>
</head>
<body>
<div id="hero">
  <div id="info">Three.js OrbitControls Test</div>
  <canvas id="three-canvas"></canvas>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const hero = document.getElementById("hero");
  const infoDiv = document.getElementById("info");
  const canvas = document.getElementById("three-canvas");
  
  if (!hero || !canvas) {
    console.error("No hero or canvas found!");
    return;
  }

  // Log container size
  console.log("Hero size:", hero.clientWidth, hero.clientHeight);
  infoDiv.textContent += ` | Hero size: ${hero.clientWidth} x ${hero.clientHeight}`;

  // 1) Create WebGLRenderer
  const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
    antialias: true
  });
  // black background
  renderer.setClearColor(0x000000, 1);
  renderer.setSize(hero.clientWidth, hero.clientHeight);
  renderer.setPixelRatio(window.devicePixelRatio);

  // 2) Scene & Camera
  const scene = new THREE.Scene();
  // 
  const camera = new THREE.PerspectiveCamera(
    50,
    hero.clientWidth / hero.clientHeight,
    0.1,
    1000
  );
  camera.position.set(0, 0, 20);

  // 3) OrbitControls
  const controls = new THREE.OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;
  controls.dampingFactor = 0.05;
  controls.enablePan = false;  // optional
  controls.update();

  // 4) Add geometry (a big pink torus)
  const geometry = new THREE.TorusGeometry(5, 1.5, 16, 100);
  // BasicMaterial so we do not rely on lighting
  const material = new THREE.MeshBasicMaterial({ color: 0xff00ff }); 
  const torus = new THREE.Mesh(geometry, material);
  scene.add(torus);

  // Animate
  function animate() {
    requestAnimationFrame(animate);

    // Rotate slightly
    torus.rotation.x += 0.002;
    torus.rotation.y += 0.003;

    // update controls
    controls.update();
    renderer.render(scene, camera);
  }
  animate();

  // Resize
  window.addEventListener("resize", () => {
    console.log("Resizing...");
    const w = hero.clientWidth, h = hero.clientHeight;
    console.log("New hero size:", w, h);
    infoDiv.textContent = `Three.js OrbitControls Test | Hero size: ${w} x ${h}`;
    renderer.setSize(w, h);
    camera.aspect = w / h;
    camera.updateProjectionMatrix();
  });
});
</script>
</body>
</html>
